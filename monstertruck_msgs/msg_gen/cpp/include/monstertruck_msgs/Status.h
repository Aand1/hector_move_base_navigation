/* Auto-generated by genmsg_cpp for file /home/kohlbrecher/hector/indigo/stacks/hector/monstertruck/monstertruck_msgs/msg/Status.msg */
#ifndef MONSTERTRUCK_MSGS_MESSAGE_STATUS_H
#define MONSTERTRUCK_MSGS_MESSAGE_STATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct Status_ {
  typedef Status_<ContainerAllocator> Type;

  Status_()
  : header()
  , voltage1(0.0)
  , voltage2(0.0)
  , status(0)
  {
  }

  Status_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , voltage1(0.0)
  , voltage2(0.0)
  , status(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _voltage1_type;
  float voltage1;

  typedef float _voltage2_type;
  float voltage2;

  typedef uint16_t _status_type;
  uint16_t status;

  enum { AUTONOMOUS = 1 };
  enum { NAVIGATION_READY = 2 };
  enum { NAVIGATION_ODOMETRY = 4 };
  enum { NAVIGATION_GPS = 8 };
  enum { NAVIGATION_COMPASS = 16 };
  enum { NAVIGATION_UPDATE_2D = 32 };
  enum { NAVIGATION_UPDATE_3D = 64 };

  typedef boost::shared_ptr< ::monstertruck_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::Status_<ContainerAllocator>  const> ConstPtr;
}; // struct Status
typedef  ::monstertruck_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::monstertruck_msgs::Status> StatusPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::Status const> StatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::monstertruck_msgs::Status_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::monstertruck_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::monstertruck_msgs::Status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::monstertruck_msgs::Status_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b401e47c89d5600c3cddee66fb6b4851";
  }

  static const char* value(const  ::monstertruck_msgs::Status_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb401e47c89d5600cULL;
  static const uint64_t static_value2 = 0x3cddee66fb6b4851ULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "monstertruck_msgs/Status";
  }

  static const char* value(const  ::monstertruck_msgs::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::Status_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
float32 voltage1\n\
float32 voltage2\n\
\n\
uint16 status\n\
uint16 AUTONOMOUS=1\n\
uint16 NAVIGATION_READY=2\n\
uint16 NAVIGATION_ODOMETRY=4\n\
uint16 NAVIGATION_GPS=8\n\
uint16 NAVIGATION_COMPASS=16\n\
uint16 NAVIGATION_UPDATE_2D=32\n\
uint16 NAVIGATION_UPDATE_3D=64\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::monstertruck_msgs::Status_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::monstertruck_msgs::Status_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::monstertruck_msgs::Status_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.voltage1);
    stream.next(m.voltage2);
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Status_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::monstertruck_msgs::Status_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage1: ";
    Printer<float>::stream(s, indent + "  ", v.voltage1);
    s << indent << "voltage2: ";
    Printer<float>::stream(s, indent + "  ", v.voltage2);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_STATUS_H

