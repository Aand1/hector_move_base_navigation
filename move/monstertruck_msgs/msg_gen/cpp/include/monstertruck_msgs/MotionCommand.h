/* Auto-generated by genmsg_cpp for file /home/kohlbrecher/hector/indigo/stacks/hector/monstertruck/monstertruck_msgs/msg/MotionCommand.msg */
#ifndef MONSTERTRUCK_MSGS_MESSAGE_MOTIONCOMMAND_H
#define MONSTERTRUCK_MSGS_MESSAGE_MOTIONCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct MotionCommand_ {
  typedef MotionCommand_<ContainerAllocator> Type;

  MotionCommand_()
  : speed(0.0)
  , steerAngleFront(0.0)
  , steerAngleRear(0.0)
  , brake(false)
  {
  }

  MotionCommand_(const ContainerAllocator& _alloc)
  : speed(0.0)
  , steerAngleFront(0.0)
  , steerAngleRear(0.0)
  , brake(false)
  {
  }

  typedef float _speed_type;
  float speed;

  typedef float _steerAngleFront_type;
  float steerAngleFront;

  typedef float _steerAngleRear_type;
  float steerAngleRear;

  typedef uint8_t _brake_type;
  uint8_t brake;


  typedef boost::shared_ptr< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::MotionCommand_<ContainerAllocator>  const> ConstPtr;
}; // struct MotionCommand
typedef  ::monstertruck_msgs::MotionCommand_<std::allocator<void> > MotionCommand;

typedef boost::shared_ptr< ::monstertruck_msgs::MotionCommand> MotionCommandPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::MotionCommand const> MotionCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::monstertruck_msgs::MotionCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::monstertruck_msgs::MotionCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c7315886ba784873a03b26d185e1ab17";
  }

  static const char* value(const  ::monstertruck_msgs::MotionCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc7315886ba784873ULL;
  static const uint64_t static_value2 = 0xa03b26d185e1ab17ULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "monstertruck_msgs/MotionCommand";
  }

  static const char* value(const  ::monstertruck_msgs::MotionCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 speed\n\
float32 steerAngleFront\n\
float32 steerAngleRear\n\
bool brake\n\
\n\
";
  }

  static const char* value(const  ::monstertruck_msgs::MotionCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.speed);
    stream.next(m.steerAngleFront);
    stream.next(m.steerAngleRear);
    stream.next(m.brake);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotionCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::MotionCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::monstertruck_msgs::MotionCommand_<ContainerAllocator> & v) 
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "steerAngleFront: ";
    Printer<float>::stream(s, indent + "  ", v.steerAngleFront);
    s << indent << "steerAngleRear: ";
    Printer<float>::stream(s, indent + "  ", v.steerAngleRear);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_MOTIONCOMMAND_H

