/* Auto-generated by genmsg_cpp for file /home/kohlbrecher/hector/indigo/stacks/hector/monstertruck/monstertruck_msgs/msg/RawOdometry.msg */
#ifndef MONSTERTRUCK_MSGS_MESSAGE_RAWODOMETRY_H
#define MONSTERTRUCK_MSGS_MESSAGE_RAWODOMETRY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace monstertruck_msgs
{
template <class ContainerAllocator>
struct RawOdometry_ {
  typedef RawOdometry_<ContainerAllocator> Type;

  RawOdometry_()
  : header()
  , tics_fl(0)
  , tics_fr(0)
  , tics_rl(0)
  , tics_rr(0)
  , v_fl(0.0)
  , v_fr(0.0)
  , v_rl(0.0)
  , v_rr(0.0)
  , speed(0.0)
  , yawRate(0.0)
  {
  }

  RawOdometry_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , tics_fl(0)
  , tics_fr(0)
  , tics_rl(0)
  , tics_rr(0)
  , v_fl(0.0)
  , v_fr(0.0)
  , v_rl(0.0)
  , v_rr(0.0)
  , speed(0.0)
  , yawRate(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _tics_fl_type;
  uint32_t tics_fl;

  typedef uint32_t _tics_fr_type;
  uint32_t tics_fr;

  typedef uint32_t _tics_rl_type;
  uint32_t tics_rl;

  typedef uint32_t _tics_rr_type;
  uint32_t tics_rr;

  typedef float _v_fl_type;
  float v_fl;

  typedef float _v_fr_type;
  float v_fr;

  typedef float _v_rl_type;
  float v_rl;

  typedef float _v_rr_type;
  float v_rr;

  typedef float _speed_type;
  float speed;

  typedef float _yawRate_type;
  float yawRate;


  typedef boost::shared_ptr< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::monstertruck_msgs::RawOdometry_<ContainerAllocator>  const> ConstPtr;
}; // struct RawOdometry
typedef  ::monstertruck_msgs::RawOdometry_<std::allocator<void> > RawOdometry;

typedef boost::shared_ptr< ::monstertruck_msgs::RawOdometry> RawOdometryPtr;
typedef boost::shared_ptr< ::monstertruck_msgs::RawOdometry const> RawOdometryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::monstertruck_msgs::RawOdometry_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace monstertruck_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::monstertruck_msgs::RawOdometry_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > {
  static const char* value() 
  {
    return "16be9e146c33fd79f2291a429164cfb3";
  }

  static const char* value(const  ::monstertruck_msgs::RawOdometry_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x16be9e146c33fd79ULL;
  static const uint64_t static_value2 = 0xf2291a429164cfb3ULL;
};

template<class ContainerAllocator>
struct DataType< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > {
  static const char* value() 
  {
    return "monstertruck_msgs/RawOdometry";
  }

  static const char* value(const  ::monstertruck_msgs::RawOdometry_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint32 tics_fl\n\
uint32 tics_fr\n\
uint32 tics_rl\n\
uint32 tics_rr\n\
float32 v_fl\n\
float32 v_fr\n\
float32 v_rl\n\
float32 v_rr\n\
float32 speed\n\
float32 yawRate\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::monstertruck_msgs::RawOdometry_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::monstertruck_msgs::RawOdometry_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.tics_fl);
    stream.next(m.tics_fr);
    stream.next(m.tics_rl);
    stream.next(m.tics_rr);
    stream.next(m.v_fl);
    stream.next(m.v_fr);
    stream.next(m.v_rl);
    stream.next(m.v_rr);
    stream.next(m.speed);
    stream.next(m.yawRate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RawOdometry_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::monstertruck_msgs::RawOdometry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::monstertruck_msgs::RawOdometry_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tics_fl: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tics_fl);
    s << indent << "tics_fr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tics_fr);
    s << indent << "tics_rl: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tics_rl);
    s << indent << "tics_rr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.tics_rr);
    s << indent << "v_fl: ";
    Printer<float>::stream(s, indent + "  ", v.v_fl);
    s << indent << "v_fr: ";
    Printer<float>::stream(s, indent + "  ", v.v_fr);
    s << indent << "v_rl: ";
    Printer<float>::stream(s, indent + "  ", v.v_rl);
    s << indent << "v_rr: ";
    Printer<float>::stream(s, indent + "  ", v.v_rr);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "yawRate: ";
    Printer<float>::stream(s, indent + "  ", v.yawRate);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MONSTERTRUCK_MSGS_MESSAGE_RAWODOMETRY_H

